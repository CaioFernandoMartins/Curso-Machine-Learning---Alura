# -*- coding: utf-8 -*-
"""Introdução - Machine Learning e Classificação Projeto 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L8DQvWmDQ5lbfK8bgx4P6I9NSgwjhHUD
"""

import pandas as pd 
uri= 'https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv'
dados = pd.read_csv(uri)

a_renomear = {
    'expected_hours' : 'horas_esperadas',
    'price': 'preco',
    'unfinished': 'nao_finalizado'
}

dados = dados.rename(columns = a_renomear)

troca = {
    0 : 1,
    1 : 0
}
dados['finalizado'] = dados.nao_finalizado.map(troca)
dados.head()

dados.tail()

import seaborn as sns

sns.scatterplot(x = 'horas_esperadas', y = 'preco', data = dados)

sns.scatterplot(x = 'horas_esperadas', y = 'preco', hue = 'finalizado', data = dados)
#criou um gráfico indicando os finalizados e os não finalizados

sns.relplot(x = 'horas_esperadas', y = 'preco', hue = 'finalizado', col = 'finalizado', data = dados)
#Criou dois gráficos, um com os não finalizados e o outro com os finalizados.
#Assim da para entender a estrutura

x = dados[['horas_esperadas', 'preco']]
y = dados['finalizado']

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 5

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                        random_state = SEED,
                                                        test_size = 0.25,
                                                        stratify = y)
print(f'Treinamentos com {len(treino_x)} elementos e testaremos com {len(teste_x)}')

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes) * 100
print(f'A acurácia foi de {acuracia}')

import numpy as np
previsoes_de_base = np.ones(540)
acuracia = accuracy_score(teste_y, previsoes_de_base) * 100
print(f'A acurácia do algoritmo de baseline foi de {acuracia}')

"""#Curva de decisão"""

sns.scatterplot(x = 'horas_esperadas', y = 'preco', hue = teste_y, data = teste_x )

x_min = teste_x.horas_esperadas.min()
x_max = teste_x.horas_esperadas.max()
y_min = teste_x.preco.min()
y_max = teste_x.preco.max()

print(x_min, x_max, y_min, y_max)

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min)/pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min)/pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
pontos = np.c_[xx.ravel(), yy.ravel()]
pontos

Z = modelo.predict(pontos) 
Z = Z.reshape(xx.shape)
Z

import matplotlib.pyplot as plt
#decision boundary
plt.contourf(xx, yy, Z, alpha = 0.4)
plt.scatter(teste_x.horas_esperadas, teste_x.preco, c = teste_y, s = 3)



